// <auto-generated />
using System;
using UserServer.DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace UserServer.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241121123912_Adding_ConversionStatus_In_CADFile_Entity")]
    partial class Adding_ConversionStatus_In_CADFile_Entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserServer.DAL.Models.CADFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConversionStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Not Initiated");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("CADFiles");
                });

            modelBuilder.Entity("UserServer.DAL.Models.ModelMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CADFileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CADFileId")
                        .IsUnique();

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("UserServer.DAL.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("UserServer.DAL.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("UserServer.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("User_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2048e82-36ac-43f1-b4fa-d67e480239fd"),
                            CreatedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2241),
                            Email = "admin@gmail.com",
                            ModifiedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2243),
                            Password = "Admin123!",
                            Role = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("54435c75-3a7b-4392-b0cb-4128a311283d"),
                            CreatedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2277),
                            Email = "user1@gmail.com",
                            ModifiedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2277),
                            Password = "User1@123",
                            Role = "user",
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("9a8e05d6-4d1c-4ca7-9518-a0ae0a3fb0f5"),
                            CreatedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2283),
                            Email = "user2@gmail.com",
                            ModifiedAt = new DateTime(2024, 11, 21, 12, 39, 12, 135, DateTimeKind.Utc).AddTicks(2283),
                            Password = "User2@123",
                            Role = "user",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("UserServer.DAL.Models.UserProjectMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjectMapping");
                });

            modelBuilder.Entity("UserServer.DAL.Models.CADFile", b =>
                {
                    b.HasOne("UserServer.DAL.Models.Project", "Project")
                        .WithMany("CADFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserServer.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserServer.DAL.Models.ModelMetadata", b =>
                {
                    b.HasOne("UserServer.DAL.Models.CADFile", "CADFile")
                        .WithOne("Metadata")
                        .HasForeignKey("UserServer.DAL.Models.ModelMetadata", "CADFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CADFile");
                });

            modelBuilder.Entity("UserServer.DAL.Models.Permission", b =>
                {
                    b.HasOne("UserServer.DAL.Models.Project", "Project")
                        .WithMany("Permissions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserServer.DAL.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserServer.DAL.Models.Project", b =>
                {
                    b.HasOne("UserServer.DAL.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserServer.DAL.Models.UserProjectMapping", b =>
                {
                    b.HasOne("UserServer.DAL.Models.Project", "Project")
                        .WithMany("UserProjectMappings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserServer.DAL.Models.User", "User")
                        .WithMany("UserProjectMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserServer.DAL.Models.CADFile", b =>
                {
                    b.Navigation("Metadata")
                        .IsRequired();
                });

            modelBuilder.Entity("UserServer.DAL.Models.Project", b =>
                {
                    b.Navigation("CADFiles");

                    b.Navigation("Permissions");

                    b.Navigation("UserProjectMappings");
                });

            modelBuilder.Entity("UserServer.DAL.Models.User", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Projects");

                    b.Navigation("UserProjectMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
